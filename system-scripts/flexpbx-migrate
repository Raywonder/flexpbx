#!/bin/bash
###############################################################################
# FlexPBX Migration Tool
# Migrate FlexPBX installation from one user account to another
#
# Usage: flexpbx-migrate [OPTIONS] <target_username>
#   -s, --source <username>   Source username (default: current user)
#   -b, --backup-dir <path>   Custom backup directory
#   -k, --keep-backup         Keep backup after migration
#   -v, --verbose             Verbose output
#   -y, --yes                 Skip confirmation prompts
#   -h, --help                Show this help
#
# Examples:
#   flexpbx-migrate newuser                    # Migrate to newuser
#   flexpbx-migrate -s olduser -y newuser      # Migrate from olduser
#   flexpbx-migrate -k -v newuser              # Verbose, keep backup
###############################################################################

set -e

# Default values
SOURCE_USER="$USER"
TARGET_USER=""
BACKUP_DIR="/tmp/flexpbx-migration"
KEEP_BACKUP=false
VERBOSE=false
AUTO_YES=false

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Logging functions
log_info() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

log_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

log_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

log_error() {
    echo -e "${RED}[ERROR]${NC} $1"
    exit 1
}

# Show help
show_help() {
    grep '^#' "$0" | grep -v '#!/bin/bash' | sed 's/^# *//'
    exit 0
}

# Confirm action
confirm() {
    if [ "$AUTO_YES" = true ]; then
        return 0
    fi

    local message="$1"
    echo -e "${YELLOW}$message${NC}"
    read -p "Continue? [y/N] " -n 1 -r
    echo
    if [[ ! $REPLY =~ ^[Yy]$ ]]; then
        log_error "Operation cancelled by user"
    fi
}

# Parse command line arguments
while [[ $# -gt 0 ]]; do
    case $1 in
        -s|--source)
            SOURCE_USER="$2"
            shift 2
            ;;
        -b|--backup-dir)
            BACKUP_DIR="$2"
            shift 2
            ;;
        -k|--keep-backup)
            KEEP_BACKUP=true
            shift
            ;;
        -v|--verbose)
            VERBOSE=true
            shift
            ;;
        -y|--yes)
            AUTO_YES=true
            shift
            ;;
        -h|--help)
            show_help
            ;;
        *)
            if [ -z "$TARGET_USER" ]; then
                TARGET_USER="$1"
                shift
            else
                log_error "Unknown option: $1. Use -h for help."
            fi
            ;;
    esac
done

# Validate arguments
if [ -z "$TARGET_USER" ]; then
    log_error "No target user specified. Use -h for help."
fi

# Check if source user exists
if ! id "$SOURCE_USER" &>/dev/null; then
    log_error "Source user does not exist: $SOURCE_USER"
fi

# Check if target user exists
if ! id "$TARGET_USER" &>/dev/null; then
    log_error "Target user does not exist: $TARGET_USER"
fi

# Check if same user
if [ "$SOURCE_USER" = "$TARGET_USER" ]; then
    log_error "Source and target users are the same"
fi

# Check if flexpbx-backup exists
if [ ! -x "/usr/local/bin/flexpbx-backup" ]; then
    log_error "flexpbx-backup not found. Please install FlexPBX backup tools first."
fi

# Check if flexpbx-restore exists
if [ ! -x "/usr/local/bin/flexpbx-restore" ]; then
    log_error "flexpbx-restore not found. Please install FlexPBX backup tools first."
fi

###############################################################################
# Migration Process
###############################################################################

echo -e "${BLUE}╔═══════════════════════════════════════════════════════╗${NC}"
echo -e "${BLUE}║           FlexPBX Migration Tool                      ║${NC}"
echo -e "${BLUE}╚═══════════════════════════════════════════════════════╝${NC}"
echo ""
echo "Source user: $SOURCE_USER"
echo "Target user: $TARGET_USER"
echo "Backup directory: $BACKUP_DIR"
echo ""

confirm "This will migrate FlexPBX from $SOURCE_USER to $TARGET_USER"

# Create backup directory
mkdir -p "$BACKUP_DIR"

# Step 1: Create backup from source user
log_info "Step 1: Creating backup from source user..."

BACKUP_FILE="$BACKUP_DIR/flexpbx-migration-$(date +%Y%m%d-%H%M%S).flx"

if [ "$SOURCE_USER" = "$USER" ]; then
    # We are the source user, run backup directly
    if [ "$VERBOSE" = true ]; then
        /usr/local/bin/flexpbx-backup -t flx -o "$BACKUP_DIR" -v
    else
        /usr/local/bin/flexpbx-backup -t flx -o "$BACKUP_DIR"
    fi

    # Find the latest backup
    BACKUP_FILE=$(find "$BACKUP_DIR" -name "flexpbx-*.flx" -type f -printf '%T@ %p\n' | sort -rn | head -1 | cut -d' ' -f2-)
else
    # Need to run as source user
    log_info "Running backup as $SOURCE_USER..."

    if [ "$VERBOSE" = true ]; then
        sudo -u "$SOURCE_USER" /usr/local/bin/flexpbx-backup -t flx -o "$BACKUP_DIR" -v
    else
        sudo -u "$SOURCE_USER" /usr/local/bin/flexpbx-backup -t flx -o "$BACKUP_DIR"
    fi

    # Find the latest backup
    BACKUP_FILE=$(find "$BACKUP_DIR" -name "flexpbx-*.flx" -type f -printf '%T@ %p\n' | sort -rn | head -1 | cut -d' ' -f2-)
fi

if [ ! -f "$BACKUP_FILE" ]; then
    log_error "Backup creation failed"
fi

log_success "Backup created: $BACKUP_FILE"

# Step 2: Restore to target user
log_info "Step 2: Restoring to target user..."

RESTORE_OPTS="-m migrate -u $TARGET_USER"

if [ "$VERBOSE" = true ]; then
    RESTORE_OPTS="$RESTORE_OPTS -v"
fi

if [ "$AUTO_YES" = true ]; then
    RESTORE_OPTS="$RESTORE_OPTS -y"
fi

# Run restore
/usr/local/bin/flexpbx-restore $RESTORE_OPTS "$BACKUP_FILE"

log_success "FlexPBX migrated to $TARGET_USER"

# Step 3: Update file ownership
log_info "Step 3: Updating file ownership..."

TARGET_HOME="/home/$TARGET_USER"

# Update ownership of all FlexPBX files
sudo chown -R "$TARGET_USER:nobody" "$TARGET_HOME/public_html" 2>/dev/null || true
sudo chown -R "$TARGET_USER:nobody" "$TARGET_HOME/users" 2>/dev/null || true
sudo chown -R "$TARGET_USER:nobody" "$TARGET_HOME/admins" 2>/dev/null || true
sudo chown -R "$TARGET_USER:nobody" "$TARGET_HOME/cache" 2>/dev/null || true
sudo chown -R "$TARGET_USER:nobody" "$TARGET_HOME/logs" 2>/dev/null || true
sudo chown -R "$TARGET_USER:nobody" "$TARGET_HOME/backup" 2>/dev/null || true
sudo chown -R "$TARGET_USER:nobody" "$TARGET_HOME/templates" 2>/dev/null || true
sudo chown -R "$TARGET_USER:nobody" "$TARGET_HOME/temp_passwords" 2>/dev/null || true
sudo chown -R "$TARGET_USER:nobody" "$TARGET_HOME/push_subscriptions" 2>/dev/null || true

log_success "Ownership updated"

# Step 4: Update sudoers if needed
log_info "Step 4: Updating sudoers configuration..."

SUDOERS_FILE="/etc/sudoers.d/flexpbx-asterisk"

if [ -f "$SUDOERS_FILE" ]; then
    # Backup current sudoers
    sudo cp "$SUDOERS_FILE" "$SUDOERS_FILE.bak"

    # Update username in sudoers
    sudo sed -i "s/$SOURCE_USER/$TARGET_USER/g" "$SUDOERS_FILE"

    log_success "Sudoers updated"
else
    log_warning "Sudoers file not found: $SUDOERS_FILE"
fi

# Step 5: Test permissions
log_info "Step 5: Testing permissions..."

# Test sudo access
if sudo -u "$TARGET_USER" sudo -l &>/dev/null; then
    log_success "Sudo permissions working"
else
    log_warning "Sudo permissions may need manual verification"
fi

# Cleanup
if [ "$KEEP_BACKUP" = false ]; then
    log_info "Cleaning up backup file..."
    rm -f "$BACKUP_FILE"
    log_success "Backup removed"
else
    log_info "Backup kept at: $BACKUP_FILE"
fi

# Final summary
echo ""
log_success "Migration complete!"
echo ""
echo -e "${GREEN}╔═══════════════════════════════════════════════════════╗${NC}"
echo -e "${GREEN}║           Migration Summary                           ║${NC}"
echo -e "${GREEN}╠═══════════════════════════════════════════════════════╣${NC}"
echo -e "${GREEN}║ From: $SOURCE_USER → $TARGET_USER                    ║${NC}"
echo -e "${GREEN}║ FlexPBX installed to: /home/$TARGET_USER              ║${NC}"
echo -e "${GREEN}║                                                       ║${NC}"
echo -e "${GREEN}║ Next steps:                                           ║${NC}"
echo -e "${GREEN}║ 1. Verify web server configuration                   ║${NC}"
echo -e "${GREEN}║ 2. Update DNS/domain settings if needed              ║${NC}"
echo -e "${GREEN}║ 3. Test login at admin portal                        ║${NC}"
echo -e "${GREEN}║ 4. Verify Asterisk integration                       ║${NC}"
echo -e "${GREEN}╚═══════════════════════════════════════════════════════╝${NC}"
echo ""

if [ "$KEEP_BACKUP" = true ]; then
    echo "Backup saved at: $BACKUP_FILE"
    echo ""
fi
